!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!       Global Variables                        !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!tcp socket object
VAR socketdev client_socket;
    
! The host and port that we will be listening for a connection on. Currently set to localhost.
PERS string host := "127.0.0.1";

CONST num port := 20000;

!Array of letter coordinates
!Dimension 1 is the type of data i.e. 1 = boldness, 2 = x coordinate, 3 = y coordinate
!Dimension 2 is the letter number i.e. 1 is the first letter, 5 is the fifth letter
!Dimension 3 is the coordinate number in a letter i.e. 3 is the third coordinate
!e.g. letterArray{2, 3, 6} refers to the x coordinate of the 6th point in the 3rd letter
!e.g. letterArray{1, 6, 1} refers to the boldness of the 6th letter (Dimension 3 is always 1 for boldness)
VAR num letterArray{3,100,1000};

!Array of strings storing the message. Each element is one part (part is a section separated by a comma delimiter)
VAR string messageArray{10000};
!Array of blocks on the cake/conveyor + orientation. Limit of 50 blocks but array may not be filled.
VAR num blockArray{50,7};
!Array of left over blocks on conveyor + junk area.
VAR num leftOverArray{50,6};
!Flag to check if error has occurred. (Not used at the moment)
VAR bool errorFlag;
!String containing error message that needs to be sent
VAR string errorMessage;

!Number of letters in a letterArray. Needed as array size may change and leftover data may still be there.
VAR num numLetters;
!Number of coordinates in path for each letter.
VAR num numCoordinates{100};

!Number of blocks on cake/conveyor. Needed as array size may change.
VAR num numBlocks;
!Number of left over blocks on conveyor.
VAR num numLeftOver;


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!           Functions                       !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!NOTES
!example of how the functions might be called. Normally start with ListenForAndAcceptConnection to open the socket, 
!do all the receiveMessage and sendError.
!when the program has finished then call CloseConnection to close the connection.
PROC MainServer()


!INPUT
!socketdev client_socket - this is a socket to be opened and connected to
!string host - ip address to connect to e.g. "192.168.0.2" or "127.0.0.1"
!num port - port number to connect to e.g. 20000
!OUTPUT
!socketdev client_socket - the socket has now connected to a client
PROC ListenForAndAcceptConnection(VAR socketdev client_socket, string host, num port)

!INPUT
!socketdev client_socket - socket to be closed
!OUTPUT
!socketdev client_socket - closed socket
PROC CloseConnection(VAR socketdev client_socket)

!INPUT
!socketdev client_socket - socket to be read from
!OUTPUT
!string messageArray{*} - Array of strings which stores all the parts of the message
PROC receiveMessage(VAR socketdev client_socket, VAR string messageArray{*})

!INPUT
!string messageArray{*} - Array of strings which contains the message
!OUTPUT
!num blockArray{*,*} - Array of blocks on the cake/conveyor. Only used when messagetype is for block trajectories
!num leftOverArray{*,*} - Array of left over blocks on conveyor and junk area. Only used when messagetype is for block trajectories
!num numBlocks - Number of blocks on cake/conveyor. Only used when messagetype is for block trajectories
!num numLeftOver - Number of left over blocks. Only used when messagetype is for block trajectories
!num letterArray{*,*,*} - Array which contains boldness and letters/numbers. Only used when messagetype is for letter trajectories
!num numLetters - Number of letters. Only used when messagetype is for letter trajectories
!num numCoordinates{100} - Number of coordinates for each letter. Only used when messagetype is for letter trajectories
!NOTES
!messagetype is determined by first element of messageArray.
PROC parseString(VAR string messageArray{*}, VAR num blockArray{*,*}, VAR num leftOverArray{*,*}, VAR num numBlocks, VAR num numLeftOver, VAR num letterArray{*,*,*}, VAR num numLetters, VAR num numCoordinates{*})

!INPUT
!socketdev client_socket - Socket which the message will be sent to.
!string errorMessage - error message that will be sent.
PROC sendError(VAR socketdev client_socket, string errorMessage)

!INPUT
!string messageArray - Array of strings which contains the message
!OUTPUT
!num letterArray{*,*,*} - Array which contains boldness and letters/numbers.
!num numLetters - Number of letters.
!num numCoordinates{100} - Number of coordinates for each letter.
!NOTES
!This function does not need to be called. Normally done by parseString.
PROC str2LetterTraj(string messageArray{*}, VAR num letterArray{*,*,*}, VAR num numLetters, VAR num numCoordinates{*})

!INPUT
!socketdev client_socket - Socket which the message will be sent to.
!OUTPUT
!num blockArray{*,*} - Array of blocks on the cake/conveyor.
!num leftOverArray{*,*} - Array of left over blocks on conveyor and junk area.
!num numBlocks - Number of blocks on cake/conveyor.
!num numLeftOver - Number of left over blocks.
!NOTES
!This function does not need to be called. Normally done by parseString.
PROC str2BlockTraj(string messageArray{*}, VAR num blockArray{*,*}, VAR num leftOverArray{*,*}, VAR num numBlocks, VAR num numLeftOver)

!INPUT
!string message - message which is to be SplitStr
!OUTPUT
!string messageArray{*} - Array of strings which contain the message
!NOTES
!Due to changes in how messages are sent, SplitStr is unused and replaced by receiveMessage
PROC  SplitStr(VAR string message,VAR string messageArray{*})